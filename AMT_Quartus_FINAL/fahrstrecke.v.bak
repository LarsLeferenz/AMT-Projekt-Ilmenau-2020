// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// Generated by Quartus Prime Version 16.1.0 Build 196 10/24/2016 SJ Lite Edition
// Created on Mon Aug 14 15:11:45 2017

// synthesis message_off 10175

`timescale 1ns/1ns

module fahrstrecke (
    reset,clock,fk,
    sl,sr,sk,dl,dr);

    input reset;
    input clock;
    input fk;
    tri0 reset;
    tri0 fk;
    output sl;
    output sr;
    output sk;
    output dl;
    output dr;
    reg sl;
    reg sr;
    reg sk;
    reg dl;
    reg dr;
    reg [4:0] fstate;
    reg [4:0] reg_fstate;
    parameter Geradeaus1=0,Links=1,Geradeaus2=2,Rechts=3,Fertig=4;

    always @(posedge clock)
    begin
        if (clock) begin
            fstate <= reg_fstate;
        end
    end

    always @(fstate or reset or fk)
    begin
        if (~reset) begin
            reg_fstate <= Geradeaus1;
            sl <= 1'b0;
            sr <= 1'b0;
            sk <= 1'b0;
            dl <= 1'b0;
            dr <= 1'b0;
        end
        else begin
            sl <= 1'b0;
            sr <= 1'b0;
            sk <= 1'b0;
            dl <= 1'b0;
            dr <= 1'b0;
            case (fstate)
                Geradeaus1: begin
                    if (~(fk))
                        reg_fstate <= Geradeaus1;
                    else if (fk)
                        reg_fstate <= Links;
                    // Inserting 'else' block to prevent latch inference
                    else
                        reg_fstate <= Geradeaus1;

                    sk <= 1'b1;

                    sr <= 1'b0;

                    sl <= 1'b0;

                    dr <= 1'b0;

                    dl <= 1'b0;
                end
                Links: begin
                    if (~(fk))
                        reg_fstate <= Links;
                    else if (fk)
                        reg_fstate <= Geradeaus2;
                    // Inserting 'else' block to prevent latch inference
                    else
                        reg_fstate <= Links;

                    sk <= 1'b0;

                    sr <= 1'b0;

                    sl <= 1'b1;

                    dr <= 1'b0;

                    dl <= 1'b0;
                end
                Geradeaus2: begin
                    if (~(fk))
                        reg_fstate <= Geradeaus2;
                    else if (fk)
                        reg_fstate <= Rechts;
                    // Inserting 'else' block to prevent latch inference
                    else
                        reg_fstate <= Geradeaus2;

                    sk <= 1'b1;

                    sr <= 1'b0;

                    sl <= 1'b0;

                    dr <= 1'b0;

                    dl <= 1'b0;
                end
                Rechts: begin
                    if (~(fk))
                        reg_fstate <= Rechts;
                    else if (fk)
                        reg_fstate <= Fertig;
                    // Inserting 'else' block to prevent latch inference
                    else
                        reg_fstate <= Rechts;

                    sk <= 1'b0;

                    sr <= 1'b1;

                    sl <= 1'b0;

                    dr <= 1'b0;

                    dl <= 1'b0;
                end
                Fertig: begin
                    reg_fstate <= Fertig;

                    sk <= 1'b0;

                    sr <= 1'b0;

                    sl <= 1'b0;

                    dr <= 1'b0;

                    dl <= 1'b1;
                end
                default: begin
                    sl <= 1'bx;
                    sr <= 1'bx;
                    sk <= 1'bx;
                    dl <= 1'bx;
                    dr <= 1'bx;
                    $display ("Reach undefined state");
                end
            endcase
        end
    end
endmodule // fahrstrecke
